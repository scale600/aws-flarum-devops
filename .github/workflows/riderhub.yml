name: RiderHub CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 753523452116
  ECR_REPOSITORY_NAME: riderhub
  LAMBDA_FUNCTION_NAME: riderhub-api
  PROJECT_NAME: riderhub

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          extensions: mbstring, dom, fileinfo, mysql
          coverage: none

      - name: Install Composer dependencies
        run: |
          cd src/riderhub
          composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHP tests
        run: |
          cd src/riderhub
          vendor/bin/phpunit --configuration phpunit.xml
        env:
          APP_ENV: testing
          APP_DEBUG: true

  # =============================================================================
  # Infrastructure Setup Phase
  # =============================================================================
  setup-environment:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      aws-account-id: ${{ steps.aws-identity.outputs.account }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS connection
        id: aws-identity
        run: |
          echo "Verifying AWS connection..."
          aws sts get-caller-identity
          echo "AWS connection verified successfully"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Setup Ansible
        run: |
          echo "Installing Ansible..."
          python -m pip install --upgrade pip
          pip install ansible
          ansible --version
          echo "Ansible setup completed"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

  # =============================================================================
  # Infrastructure Discovery Phase
  # =============================================================================
  deploy-infrastructure:
    needs: setup-environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      ecr-repository-url: ${{ steps.ecr-output.outputs.repository-url }}
      s3-bucket-name: ${{ steps.s3-output.outputs.bucket-name }}
      dynamodb-posts-table: ${{ steps.dynamodb-output.outputs.posts-table }}
      dynamodb-comments-table: ${{ steps.dynamodb-output.outputs.comments-table }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR Repository URL
        id: ecr-output
        run: |
          echo "Getting ECR repository URL..."
          echo "repository-url=753523452116.dkr.ecr.us-east-1.amazonaws.com/riderhub" >> $GITHUB_OUTPUT

      - name: Get DynamoDB Tables
        id: dynamodb-output
        run: |
          echo "Getting DynamoDB table names..."
          echo "posts-table=riderhub-posts" >> $GITHUB_OUTPUT
          echo "comments-table=riderhub-comments" >> $GITHUB_OUTPUT

      - name: Get S3 Bucket
        id: s3-output
        run: |
          echo "Getting S3 bucket name..."
          echo "bucket-name=riderhub-media-tvducv90" >> $GITHUB_OUTPUT

  # =============================================================================
  # Application Build Phase
  # =============================================================================
  build-application:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          echo "ECR Registry: $ECR_REGISTRY"
          echo "ECR Repository: $ECR_REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/riderhub/Dockerfile .
          echo "Docker image built successfully"

      - name: Push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Image pushed successfully: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # =============================================================================
  # Lambda Deployment Phase
  # =============================================================================
  deploy-lambda:
    needs: [deploy-infrastructure, build-application]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      lambda-function-name: ${{ steps.lambda-output.outputs.function-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Lambda ZIP Package
        run: |
          echo "Creating Lambda ZIP package..."
          zip index.js.zip index.js
          echo "ZIP package created successfully"

      - name: Update Lambda Function Code
        id: lambda-output
        run: |
          echo "Updating Lambda function code..."
          aws lambda update-function-code \
            --function-name riderhub-api \
            --zip-file fileb://index.js.zip \
            --region us-east-1
          echo "Lambda function updated successfully"
          echo "function-name=riderhub-api" >> $GITHUB_OUTPUT

  # =============================================================================
  # API Gateway Deployment Phase
  # =============================================================================
  deploy-api-gateway:
    needs: [deploy-infrastructure, deploy-lambda]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      api-gateway-url: ${{ steps.api-output.outputs.gateway-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get API Gateway URL
        id: api-output
        run: |
          echo "Getting API Gateway URL..."
          echo "gateway-url=https://99hfk9nt19.execute-api.us-east-1.amazonaws.com/production" >> $GITHUB_OUTPUT

  # =============================================================================
  # Frontend Deployment Phase
  # =============================================================================
  deploy-frontend:
    needs: [deploy-api-gateway]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Amplify
        run: |
          echo "Frontend deployment to Amplify would happen here"
          echo "API Gateway URL: ${{ needs.deploy-api-gateway.outputs.api-gateway-url }}"

  # =============================================================================
  # Configuration and Finalization Phase
  # =============================================================================
  finalize-deployment:
    needs: [deploy-api-gateway, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        run: |
          cd terraform
          echo "Initializing Terraform for finalization..."
          terraform init
          echo "Terraform initialized successfully"

      - name: Show Deployment Results
        run: |
          cd terraform
          echo "=== DEPLOYMENT RESULTS ==="
          echo "API Gateway URL:"
          terraform output -raw api_gateway_url 2>/dev/null || echo "Not available yet"
          echo ""
          echo "DynamoDB Tables:"
          terraform output -raw dynamodb_posts_table 2>/dev/null || echo "Not available yet"
          terraform output -raw dynamodb_comments_table 2>/dev/null || echo "Not available yet"
          echo ""
          echo "S3 Bucket:"
          terraform output -raw s3_bucket_name 2>/dev/null || echo "Not available yet"
          echo ""
          echo "Lambda Function:"
          terraform output -raw lambda_function_name 2>/dev/null || echo "Not available yet"
          echo "=== DEPLOYMENT COMPLETE ==="

      - name: Update Terraform State
        run: |
          cd terraform
          echo "Updating Terraform state..."
          terraform refresh
          echo "Terraform state updated successfully"

      - name: Run Ansible Configuration
        run: |
          echo "Ansible configuration would happen here"
          echo "Using default configuration values"
