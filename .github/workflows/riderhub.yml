name: RiderHub CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 753523452116
  ECR_REPOSITORY_NAME: riderhub
  LAMBDA_FUNCTION_NAME: riderhub-api
  PROJECT_NAME: riderhub

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          extensions: mbstring, dom, fileinfo, mysql
          coverage: none

      - name: Install Composer dependencies
        run: |
          cd src/riderhub
          composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHP tests
        run: |
          cd src/riderhub
          vendor/bin/phpunit --configuration phpunit.xml
        env:
          APP_ENV: testing
          APP_DEBUG: true

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Setup Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible
          ansible --version

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Terraform Plan (Infrastructure without Lambda)
        run: |
          cd terraform
          terraform init
          terraform plan
          terraform apply -auto-approve

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/riderhub/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create Lambda Function and API Gateway Integration
        run: |
          cd terraform
          terraform apply -auto-approve -var="image_tag=${{ github.sha }}"

      - name: Deploy to Amplify
        run: |
          echo "Frontend deployment to Amplify would happen here"
          echo "API Gateway URL will be available after deployment"

      - name: Update Terraform State
        run: |
          cd terraform
          terraform refresh

      - name: Run Ansible Configuration
        run: |
          echo "Ansible configuration would happen here"
          echo "Using default configuration values"
